openapi: "3.0.0"
info:
  title: Pharmacy API Docs
  description: API documentation for a yet to be built pharmacy
  contact:
    email: farinloyejonathan@gmail.com
  version: "0.1"

servers:
  - url: http://localhost:7000/v1

tags:
  - name: auth
    description: Operations with regards to Authentication
  - name: account
    description: Operations with regards to User accounts
  - name: inventory
    description: Group of stuff for inventory
  - name: category
    description: Operations for category.
  - name: product
    description: Yada yada for products
  - name: supplier
    description: Supplier yada yada
  - name: sales
    description: operations dealing with sales or so.
  - name: reports
    description: Endpoints for fetching reports

paths:
  # Authorization Paths
  /auth/login:
    post:
      tags:
        - auth
      summary: Login
      description: Log a User in
      requestBody:
        description: User object that needs to be logged in
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Auth"
        required: true
      responses:
        200:
          description: Token Object to be stored in httpOnly cookie?
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: Auth Type
                  value:
                    type: string
                    description: Token of Authenticated User
                  expiry:
                    type: string
                    description: Expiry time of Token
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  
  /auth/logout:
    post:
      tags:
        - auth
      summary: Logout
      description: Invalidate User Token and prevent reuse
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: Logged out
          content: {}
        401:
          description: Authentication Failed
          content: {}
      security:
        - token: []

  /account:
    post:
      tags:
        - account
      summary: Create a new User account
      description: Submit user details for sign up
      requestBody:
        description: content for user signup
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostAccount"
        required: true
      responses:
        200:
          description: Status OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - account
      summary: Get all accounts.
      description: Get all accounts. Admin endpoint
      security:
        - token: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /account/{slug}:
    parameters:
      - name: slug
        in: path
        description: slug of User to fetch
        required: true
        schema:
          type: string
    get:
      tags:
        - account
      summary: Get account by slug
      description: Fetch single account by ID. Admin Endpoint
      security:
        - token: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: User Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - account
      summary: Update a User account
      description: Adjust User Account
      security:
        - token: []
      requestBody:
        description: content for updating user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostAccount"
        required: true
      responses:
        200:
          description: Status OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: User Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - account
      description: Delete Account
      summary: Delete user account. Admin Endpoint.
      security:
        - token: []
      responses:
        204:
          description: Deleted Successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: User Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Category endpoints
  /category:
    post:
      tags:
        - category
      summary: Create a new product category
      description: Submit category details for creation
      security:
        - token: []
      requestBody:
        description: Body for Category creation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
        required: true
      responses:
        200:
          description: Status OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        400:
          description:  Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - category
      summary: Get all Categories
      description: Fetch all Categories
      responses:
        200:
          description: Status OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErrorResponse"

  /category/{slug}:
    parameters:
      - name: slug
        in: path
        description: slug of category to be interacted with
        required: true
        schema:
          type: string
    
    get:
      tags:
        - category
      description: Get category by slug
      responses:
        200:
          description: Status OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - category
      description: Update a category
      requestBody:
        description: Content to update category with
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - category
      description: Delete a category
      summary: Delete a category with specified slug
      responses:
        204:
          description: Deleted Successfully
        401:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Product endpoints
  /product:
    post:
      tags:
        - product
      summary: Create a new product
      description: Submit product details for creation
      security:
        - token: []
      requestBody:
        description: Body for product creation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
        required: true
      responses:
        200:
          description: Status OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        400:
          description:  Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - product
      summary: Get all Products
      description: Fetch all Products
      responses:
        200:
          description: Status OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErrorResponse"
  
  /product/{slug}:
    parameters:
      - name: slug
        in: path
        description: slug of product to be interacted with
        required: true
        schema:
          type: string
    
    get:
      tags:
        - product
      description: Get product by slug
      responses:
        200:
          description: Status OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - product
      description: Update a product
      requestBody:
        description: Content to update product with
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - product
      description: Delete a product
      summary: Delete a product with specified slug
      responses:
        204:
          description: Deleted Successfully
        401:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Supplier endpoints
  /supplier:
    post:
      tags:
        - supplier
      summary: Create a new supplier
      description: Submit supplier details for creation
      security:
        - token: []
      requestBody:
        description: Body for supplier creation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Supplier"
        required: true
      responses:
        200:
          description: Status OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Supplier"
        400:
          description:  Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - supplier
      summary: Get all Suppliers
      description: Fetch all Suppliers
      responses:
        200:
          description: Status OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Supplier"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErrorResponse"

  /supplier/{slug}:
    parameters:
      - name: slug
        in: path
        description: slug of supplier to be interacted with
        required: true
        schema:
          type: string
    
    get:
      tags:
        - supplier
      description: Get supplier by slug
      responses:
        200:
          description: Status OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Supplier"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - supplier
      description: Update a supplier
      requestBody:
        description: Content to update supplier with
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Supplier"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Supplier"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - supplier
      description: Delete a supplier
      summary: Delete a supplier with specified slug
      responses:
        204:
          description: Deleted Successfully
        401:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
    Auth:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          format: password
    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        created_by:
          $ref: "#/components/schemas/User"

    User:
      type: object
      properties:
        id:
          type: integer
        user_name:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        slug:
          type: string
        role:
          $ref: "#/components/schemas/Role"

    PostAccount:
      type: object
      properties:
        user_name:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
    
    Supplier:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
        phone_number:
          type: string
        email:
          type: string

    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        created_by:
          $ref: "#/components/schemas/User"
    
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        bar_code:
          type: string
        description:
          type: string
        category:
          $ref: "#/components/schemas/Category"
        expiry_date:
          type: string
          format: date-time
        purchase_date:
          type: string
          format: date-time
        production_date:
          type: string
          format: date-time
        purchase_price:
          type: number
        selling_price:
          type: number
        quantity_available:
          type: integer
        reorder_level:
          type: integer
        sku:
          type: string
        quantity_sold:
          type: integer
        supplier:
          type: array
          items:
            $ref: "#/components/schemas/Supplier"
        created_by:
          $ref: "#/components/schemas/User"
        created_at:
          type: string
          format: date-time

    OrderItem:
      type: object
      properties:
        id:
          type: integer
        product:
          $ref: "#/components/schemas/Product"
        quantity:
          type: integer

    PaymentMethod:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        is_active:
          type: boolean
        created_by:
          $ref: "#/components/schemas/User"

    Order:
      type: object
      properties:
        id:
          type: integer
        order_item:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
        total_price:
          type: number
        payment_method:
          $ref: "#/components/schemas/PaymentMethod"
        payment_verified:
          type: boolean
        cashier:
          $ref: "#/components/schemas/User"
        amount_tendered:
          type: number
        change:
          type: number
        created_at:
          type: string
          format: date-time

    Return:
      type: object
      properties:
        id:
          type: integer
        reason:
          type: string
        item:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
        order:
          $ref: "#/components/schemas/Order"
        created_by:
          $ref: "#/components/schemas/User"

  securitySchemes:
    token:
      description: JWT Token for authentication
      type: http
      scheme: bearer
      bearerFormat: JWT
